"""
Enhanced Parameter Widgets with Constraint Hints

This module extends the basic parameter widgets to include constraint validation
and user hints for preprocessing parameters.
"""

from .parameter_widgets import CustomSpinBox, CustomDoubleSpinBox
from .utils import *
from .icons import create_button_icon
import sys
import os

# Add the functions directory to path for importing constraint analyzer
sys.path.append(os.path.join(os.path.dirname(__file__), "..", "..", "functions"))

try:
    from preprocess.parameter_constraints import ParameterConstraints
    CONSTRAINTS_AVAILABLE = True
except ImportError:
    CONSTRAINTS_AVAILABLE = False


class ConstrainedSpinBox(QWidget):
    """Enhanced spinbox with parameter constraint validation and hints."""
    
    valueChanged = Signal(int)
    constraintViolated = Signal(str)  # Emitted when constraint is violated
    
    def __init__(self, parameter_name: str = None, parent=None):
        super().__init__(parent)
        self.parameter_name = parameter_name
        self.constraints = ParameterConstraints() if CONSTRAINTS_AVAILABLE else None
        self._value = 0
        self._setup_ui()
        self._apply_constraints()
    
    def _setup_ui(self):
        """Setup the main UI layout."""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(2)
        
        # Spinbox container
        spinbox_container = QWidget()
        layout = QHBoxLayout(spinbox_container)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)
        
        # Minus button
        self.minus_btn = QPushButton()
        self.minus_btn.setFixedSize(24, 24)
        self.minus_btn.setIcon(create_button_icon("minus"))
        self.minus_btn.setStyleSheet(self._button_style())
        self.minus_btn.clicked.connect(self._decrease_value)
        
        # Value input
        self.value_input = QLineEdit()
        self.value_input.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.value_input.setFixedHeight(24)
        self.value_input.setStyleSheet(self._input_style())
        self.value_input.editingFinished.connect(self._on_text_changed)
        
        # Plus button
        self.plus_btn = QPushButton()
        self.plus_btn.setFixedSize(24, 24)
        self.plus_btn.setIcon(create_button_icon("plus"))
        self.plus_btn.setStyleSheet(self._button_style())
        self.plus_btn.clicked.connect(self._increase_value)
        
        layout.addWidget(self.minus_btn)
        layout.addWidget(self.value_input)
        layout.addWidget(self.plus_btn)
        
        # Hint label
        self.hint_label = QLabel()
        self.hint_label.setWordWrap(True)
        self.hint_label.setStyleSheet("""
            QLabel {
                color: #6c757d;
                font-size: 10px;
                padding: 2px 4px;
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 3px;
                margin-top: 2px;
            }
        """)
        
        main_layout.addWidget(spinbox_container)
        main_layout.addWidget(self.hint_label)\n    \n    def _apply_constraints(self):\n        \"\"\"Apply parameter constraints if available.\"\"\"\n        if not self.constraints or not self.parameter_name:\n            self.hint_label.hide()\n            return\n        \n        constraint_info = self.constraints.get_constraint_info(self.parameter_name)\n        if not constraint_info:\n            self.hint_label.hide()\n            return\n        \n        # Set min/max values\n        if \"min\" in constraint_info:\n            self._minimum = int(constraint_info[\"min\"])\n        if \"max\" in constraint_info:\n            self._maximum = int(constraint_info[\"max\"])\n        if \"default\" in constraint_info:\n            self._value = int(constraint_info[\"default\"])\n            self.value_input.setText(str(self._value))\n        \n        # Set step size\n        step = self.constraints.get_step_size(self.parameter_name)\n        if isinstance(step, int):\n            self._step = step\n        \n        # Update hint\n        self._update_hint()\n    \n    def _update_hint(self):\n        \"\"\"Update the hint label with current parameter information.\"\"\"\n        if not self.constraints or not self.parameter_name:\n            return\n        \n        hint_text = self.constraints.get_parameter_hint(self.parameter_name, self._value)\n        \n        # Add constraint-specific styling\n        is_valid, error_msg = self.constraints.validate_parameter(self.parameter_name, self._value)\n        if not is_valid:\n            self.hint_label.setStyleSheet(\"\"\"\n                QLabel {\n                    color: #dc3545;\n                    font-size: 10px;\n                    padding: 2px 4px;\n                    background-color: #f8d7da;\n                    border: 1px solid #f5c6cb;\n                    border-radius: 3px;\n                    margin-top: 2px;\n                }\n            \"\"\")\n            self.constraintViolated.emit(error_msg)\n        else:\n            self.hint_label.setStyleSheet(\"\"\"\n                QLabel {\n                    color: #155724;\n                    font-size: 10px;\n                    padding: 2px 4px;\n                    background-color: #d4edda;\n                    border: 1px solid #c3e6cb;\n                    border-radius: 3px;\n                    margin-top: 2px;\n                }\n            \"\"\")\n        \n        self.hint_label.setText(hint_text)\n    \n    def _button_style(self) -> str:\n        \"\"\"Get button stylesheet.\"\"\"\n        return \"\"\"\n            QPushButton {\n                background-color: #f8f9fa;\n                border: 1px solid #6c757d;\n                border-radius: 12px;\n                padding: 2px;\n            }\n            QPushButton:hover {\n                background-color: #6c757d;\n            }\n            QPushButton:pressed {\n                background-color: #5a6268;\n            }\n            QPushButton:disabled {\n                background-color: #f8f9fa;\n                border-color: #bdc3c7;\n            }\n        \"\"\"\n    \n    def _input_style(self) -> str:\n        \"\"\"Get input field stylesheet.\"\"\"\n        return \"\"\"\n            QLineEdit {\n                padding: 4px;\n                border: 1px solid #bdc3c7;\n                border-radius: 3px;\n                background-color: white;\n                font-size: 12px;\n                text-align: center;\n            }\n            QLineEdit:focus {\n                border-color: #3498db;\n            }\n        \"\"\"\n    \n    def _increase_value(self):\n        \"\"\"Increase the current value.\"\"\"\n        new_value = self._value + self._step\n        if new_value <= self._maximum:\n            self.set_value(new_value)\n    \n    def _decrease_value(self):\n        \"\"\"Decrease the current value.\"\"\"\n        new_value = self._value - self._step\n        if new_value >= self._minimum:\n            self.set_value(new_value)\n    \n    def _on_text_changed(self):\n        \"\"\"Handle manual text input.\"\"\"\n        try:\n            value = int(self.value_input.text())\n            self.set_value(value)\n        except ValueError:\n            # Reset to current value if invalid input\n            self.value_input.setText(str(self._value))\n    \n    def set_value(self, value: int):\n        \"\"\"Set the spinbox value.\"\"\"\n        # Apply constraints\n        value = max(self._minimum, min(self._maximum, value))\n        \n        if value != self._value:\n            self._value = value\n            self.value_input.setText(str(value))\n            self._update_hint()\n            self.valueChanged.emit(value)\n    \n    def value(self) -> int:\n        \"\"\"Get the current value.\"\"\"\n        return self._value\n    \n    def set_range(self, minimum: int, maximum: int):\n        \"\"\"Set the value range.\"\"\"\n        self._minimum = minimum\n        self._maximum = maximum\n        # Ensure current value is within range\n        self.set_value(self._value)\n\n\nclass ConstrainedDoubleSpinBox(QWidget):\n    \"\"\"Enhanced double spinbox with parameter constraint validation and hints.\"\"\"\n    \n    valueChanged = Signal(float)\n    constraintViolated = Signal(str)\n    \n    def __init__(self, parameter_name: str = None, parent=None):\n        super().__init__(parent)\n        self.parameter_name = parameter_name\n        self.constraints = ParameterConstraints() if CONSTRAINTS_AVAILABLE else None\n        self._value = 0.0\n        self._decimals = 2\n        self._setup_ui()\n        self._apply_constraints()\n    \n    def _setup_ui(self):\n        \"\"\"Setup the main UI layout.\"\"\"\n        main_layout = QVBoxLayout(self)\n        main_layout.setContentsMargins(0, 0, 0, 0)\n        main_layout.setSpacing(2)\n        \n        # Spinbox container\n        spinbox_container = QWidget()\n        layout = QHBoxLayout(spinbox_container)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.setSpacing(2)\n        \n        # Minus button\n        self.minus_btn = QPushButton()\n        self.minus_btn.setFixedSize(24, 24)\n        self.minus_btn.setIcon(create_button_icon(\"minus\"))\n        self.minus_btn.setStyleSheet(self._button_style())\n        self.minus_btn.clicked.connect(self._decrease_value)\n        \n        # Value input\n        self.value_input = QLineEdit()\n        self.value_input.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.value_input.setFixedHeight(24)\n        self.value_input.setStyleSheet(self._input_style())\n        self.value_input.editingFinished.connect(self._on_text_changed)\n        \n        # Plus button\n        self.plus_btn = QPushButton()\n        self.plus_btn.setFixedSize(24, 24)\n        self.plus_btn.setIcon(create_button_icon(\"plus\"))\n        self.plus_btn.setStyleSheet(self._button_style())\n        self.plus_btn.clicked.connect(self._increase_value)\n        \n        layout.addWidget(self.minus_btn)\n        layout.addWidget(self.value_input)\n        layout.addWidget(self.plus_btn)\n        \n        # Hint label\n        self.hint_label = QLabel()\n        self.hint_label.setWordWrap(True)\n        self.hint_label.setStyleSheet(\"\"\"\n            QLabel {\n                color: #6c757d;\n                font-size: 10px;\n                padding: 2px 4px;\n                background-color: #f8f9fa;\n                border: 1px solid #e9ecef;\n                border-radius: 3px;\n                margin-top: 2px;\n            }\n        \"\"\")\n        \n        main_layout.addWidget(spinbox_container)\n        main_layout.addWidget(self.hint_label)\n    \n    def _apply_constraints(self):\n        \"\"\"Apply parameter constraints if available.\"\"\"\n        if not self.constraints or not self.parameter_name:\n            self.hint_label.hide()\n            return\n        \n        constraint_info = self.constraints.get_constraint_info(self.parameter_name)\n        if not constraint_info:\n            self.hint_label.hide()\n            return\n        \n        # Set min/max values\n        if \"min\" in constraint_info:\n            self._minimum = float(constraint_info[\"min\"])\n        else:\n            self._minimum = -float('inf')\n        if \"max\" in constraint_info:\n            self._maximum = float(constraint_info[\"max\"])\n        else:\n            self._maximum = float('inf')\n        if \"default\" in constraint_info:\n            self._value = float(constraint_info[\"default\"])\n            self.value_input.setText(f\"{self._value:.{self._decimals}f}\")\n        \n        # Set step size\n        step = self.constraints.get_step_size(self.parameter_name)\n        if isinstance(step, (int, float)):\n            self._step = float(step)\n        elif step == \"log\":\n            self._step = self._value * 0.1  # 10% steps for log scale\n        else:\n            self._step = 0.1\n        \n        # Update hint\n        self._update_hint()\n    \n    def _update_hint(self):\n        \"\"\"Update the hint label with current parameter information.\"\"\"\n        if not self.constraints or not self.parameter_name:\n            return\n        \n        hint_text = self.constraints.get_parameter_hint(self.parameter_name, self._value)\n        \n        # Add constraint-specific styling\n        is_valid, error_msg = self.constraints.validate_parameter(self.parameter_name, self._value)\n        if not is_valid:\n            self.hint_label.setStyleSheet(\"\"\"\n                QLabel {\n                    color: #dc3545;\n                    font-size: 10px;\n                    padding: 2px 4px;\n                    background-color: #f8d7da;\n                    border: 1px solid #f5c6cb;\n                    border-radius: 3px;\n                    margin-top: 2px;\n                }\n            \"\"\")\n            self.constraintViolated.emit(error_msg)\n        else:\n            self.hint_label.setStyleSheet(\"\"\"\n                QLabel {\n                    color: #155724;\n                    font-size: 10px;\n                    padding: 2px 4px;\n                    background-color: #d4edda;\n                    border: 1px solid #c3e6cb;\n                    border-radius: 3px;\n                    margin-top: 2px;\n                }\n            \"\"\")\n        \n        self.hint_label.setText(hint_text)\n    \n    def _button_style(self) -> str:\n        \"\"\"Get button stylesheet.\"\"\"\n        return \"\"\"\n            QPushButton {\n                background-color: #f8f9fa;\n                border: 1px solid #6c757d;\n                border-radius: 12px;\n                padding: 2px;\n            }\n            QPushButton:hover {\n                background-color: #6c757d;\n            }\n            QPushButton:pressed {\n                background-color: #5a6268;\n            }\n            QPushButton:disabled {\n                background-color: #f8f9fa;\n                border-color: #bdc3c7;\n            }\n        \"\"\"\n    \n    def _input_style(self) -> str:\n        \"\"\"Get input field stylesheet.\"\"\"\n        return \"\"\"\n            QLineEdit {\n                padding: 4px;\n                border: 1px solid #bdc3c7;\n                border-radius: 3px;\n                background-color: white;\n                font-size: 12px;\n                text-align: center;\n            }\n            QLineEdit:focus {\n                border-color: #3498db;\n            }\n        \"\"\"\n    \n    def _increase_value(self):\n        \"\"\"Increase the current value.\"\"\"\n        new_value = self._value + self._step\n        if new_value <= self._maximum:\n            self.set_value(new_value)\n    \n    def _decrease_value(self):\n        \"\"\"Decrease the current value.\"\"\"\n        new_value = self._value - self._step\n        if new_value >= self._minimum:\n            self.set_value(new_value)\n    \n    def _on_text_changed(self):\n        \"\"\"Handle manual text input.\"\"\"\n        try:\n            value = float(self.value_input.text())\n            self.set_value(value)\n        except ValueError:\n            # Reset to current value if invalid input\n            self.value_input.setText(f\"{self._value:.{self._decimals}f}\")\n    \n    def set_value(self, value: float):\n        \"\"\"Set the spinbox value.\"\"\"\n        # Apply constraints\n        value = max(self._minimum, min(self._maximum, value))\n        \n        if abs(value - self._value) > 1e-10:  # Account for floating point precision\n            self._value = value\n            self.value_input.setText(f\"{value:.{self._decimals}f}\")\n            self._update_hint()\n            self.valueChanged.emit(value)\n    \n    def value(self) -> float:\n        \"\"\"Get the current value.\"\"\"\n        return self._value\n    \n    def set_range(self, minimum: float, maximum: float):\n        \"\"\"Set the value range.\"\"\"\n        self._minimum = minimum\n        self._maximum = maximum\n        # Ensure current value is within range\n        self.set_value(self._value)\n    \n    def set_decimals(self, decimals: int):\n        \"\"\"Set number of decimal places.\"\"\"\n        self._decimals = max(0, min(10, decimals))\n        self.value_input.setText(f\"{self._value:.{self._decimals}f}\")\n\n\nclass ParameterHintWidget(QWidget):\n    \"\"\"Standalone widget for displaying parameter hints and constraints.\"\"\"\n    \n    def __init__(self, parameter_name: str, parent=None):\n        super().__init__(parent)\n        self.parameter_name = parameter_name\n        self.constraints = ParameterConstraints() if CONSTRAINTS_AVAILABLE else None\n        self._setup_ui()\n    \n    def _setup_ui(self):\n        \"\"\"Setup the hint display UI.\"\"\"\n        layout = QVBoxLayout(self)\n        layout.setContentsMargins(8, 8, 8, 8)\n        layout.setSpacing(4)\n        \n        if not self.constraints or not self.parameter_name:\n            no_info_label = QLabel(\"No constraint information available\")\n            no_info_label.setStyleSheet(\"color: #6c757d; font-style: italic;\")\n            layout.addWidget(no_info_label)\n            return\n        \n        constraint_info = self.constraints.get_constraint_info(self.parameter_name)\n        if not constraint_info:\n            no_info_label = QLabel(\"Parameter not found in constraint database\")\n            no_info_label.setStyleSheet(\"color: #6c757d; font-style: italic;\")\n            layout.addWidget(no_info_label)\n            return\n        \n        # Parameter description\n        if \"description\" in constraint_info:\n            desc_label = QLabel(constraint_info[\"description\"])\n            desc_label.setWordWrap(True)\n            desc_label.setStyleSheet(\"font-weight: bold; color: #495057;\")\n            layout.addWidget(desc_label)\n        \n        # Range information\n        range_info = []\n        if \"min\" in constraint_info:\n            range_info.append(f\"Min: {constraint_info['min']}\")\n        if \"max\" in constraint_info:\n            range_info.append(f\"Max: {constraint_info['max']}\")\n        if \"typical_range\" in constraint_info:\n            min_val, max_val = constraint_info[\"typical_range\"]\n            range_info.append(f\"Typical: {min_val} - {max_val}\")\n        \n        if range_info:\n            range_label = QLabel(\" | \".join(range_info))\n            range_label.setStyleSheet(\"color: #6c757d; font-size: 11px;\")\n            layout.addWidget(range_label)\n        \n        # Constraints\n        constraints = constraint_info.get(\"constraints\", [])\n        if constraints:\n            constraint_text = \"Constraints: \" + \", \".join([\n                c.replace(\"_\", \" \").title() for c in constraints\n            ])\n            constraint_label = QLabel(constraint_text)\n            constraint_label.setWordWrap(True)\n            constraint_label.setStyleSheet(\"color: #dc3545; font-size: 10px;\")\n            layout.addWidget(constraint_label)\n        \n        # Hint\n        if \"hint\" in constraint_info:\n            hint_label = QLabel(constraint_info[\"hint\"])\n            hint_label.setWordWrap(True)\n            hint_label.setStyleSheet(\"\"\"\n                QLabel {\n                    color: #155724;\n                    font-size: 11px;\n                    padding: 4px;\n                    background-color: #d4edda;\n                    border: 1px solid #c3e6cb;\n                    border-radius: 3px;\n                    margin-top: 4px;\n                }\n            \"\"\")\n            layout.addWidget(hint_label)\n